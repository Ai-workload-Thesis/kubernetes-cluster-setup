# roles/kubernetes/tasks/main.yml
---
- name: Install required packages for Kubernetes
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
    state: present
    update_cache: yes

- name: Create keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Kubernetes GPG key (new method)
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes repository (new method)
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
    state: present
    filename: kubernetes

- name: Install Kubernetes components
  apt:
    name:
      - "kubelet={{ k8s_version }}.*"
      - "kubeadm={{ k8s_version }}.*"
      - "kubectl={{ k8s_version }}.*"
    state: present
    update_cache: yes

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Check if cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf

- name: Initialize Kubernetes cluster
  command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --service-cidr={{ service_cidr }}
    --apiserver-advertise-address={{ ansible_default_ipv4.address }}
  register: kubeadm_init
  when: not k8s_admin_conf.stat.exists

- name: Create .kube directory
  file:
    path: "/home/{{ ansible_user | default(ansible_env.USER) }}/.kube"
    state: directory
    owner: "{{ ansible_user | default(ansible_env.USER) }}"
    group: "{{ ansible_user | default(ansible_env.USER) }}"
    mode: '0755'

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user | default(ansible_env.USER) }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user | default(ansible_env.USER) }}"
    group: "{{ ansible_user | default(ansible_env.USER) }}"
    mode: '0644'

- name: Remove master taint (single node cluster)
  command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
  environment:
    KUBECONFIG: "/home/{{ ansible_user | default(ansible_env.USER) }}/.kube/config"
  ignore_errors: yes

- name: Install Flannel CNI
  command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  environment:
    KUBECONFIG: "/home/{{ ansible_user | default(ansible_env.USER) }}/.kube/config"